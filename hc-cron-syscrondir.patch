--- hc-cron-0.13/man/cron.8.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/man/cron.8	Mon Oct 11 15:31:13 1999
@@ -32,7 +32,8 @@
 .IR crontab(1) .
 Crontabs found are loaded into memory.
 .I Cron
-then searches for /etc/crontab which is in a different format (see
+then searches for /etc/crontab file and files in /etc/cron.d
+directory which are in a different format (see
 .IR crontab(5) ).
 At startup
 .I cron
@@ -70,6 +71,7 @@
 /var/spool/cron/
 /etc/passwd
 /etc/crontab
+/etc/cron.d/*
 /var/lib/cron.lastrun
 .SH "SEE ALSO"
 crontab(1), crontab(5)
--- hc-cron-0.13/man/crontab.5.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/man/crontab.5	Mon Oct 11 15:31:13 1999
@@ -14,7 +14,7 @@
 .\" * I'll try to keep a version up to date.  I can be reached as follows:
 .\" * Paul Vixie          <paul@vix.com>          uunet!decwrl!vixie!paul
 .\" */
-.TH CRONTAB 5 "02 October 1998"
+.TH CRONTAB 5 "16 November 1998"
 .UC 4
 .SH NAME
 crontab \- tables for driving cron
@@ -73,6 +73,11 @@
 your mailer when you install cron -- /bin/mail doesn't do aliasing, and UUCP
 usually doesn't read its mail.
 .PP
+.IR cron (8)
+looks for NICE variable and executes jobs at nice level adjusted by that
+value. This is especially useful when some jobs are marked to be
+executed after the computer was shut down.
+.PP
 The format of a cron command is very much the V7 standard, with a number of
 upward-compatible extensions. There are four fields to each line: a time
 descriptor, a username (only in the system crontab), an optional flag field,
@@ -199,6 +204,8 @@
 SHELL=/bin/sh
 # mail any output to `paul', no matter whose crontab this is
 MAILTO=paul
+# lower priority by 15
+NICE=15
 #
 # run five minutes after midnight, every day; if cron is not running at 
 # that time, catch up at startup; run several times if down for more 
--- hc-cron-0.13/cron.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/cron.c	Mon Oct 11 15:31:13 1999
@@ -212,7 +212,8 @@
 			Debug(DSCH|DEXT, ("user [%s:%d:%d:...] cmd=\"%s\"\n",
 					  env_get("LOGNAME", e->envp),
 					  e->uid, e->gid, e->cmd))
-			if (bit_test(e->minute, minute)
+			if ((e->flags & RUN_NOW)
+			 || bit_test(e->minute, minute)
 			 && bit_test(e->hour, hour)
 			 && bit_test(e->month, month)
 			 && ( ((e->flags & DOM_STAR) || (e->flags & DOW_STAR))
--- hc-cron-0.13/cron.h.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/cron.h	Mon Oct 11 15:31:13 1999
@@ -57,7 +57,6 @@
 #define DEBUGGING	FALSE
 #endif
 
-#define MAXLOADAVG	.8	/* at which loadavg don't run IDLE jobs? */
 #define READ_PIPE	0	/* which end of a pipe pair do you read? */
 #define WRITE_PIPE	1	/*   or write to? */
 #define STDIN		0	/* what is stdin's file descriptor? */
@@ -168,9 +167,8 @@
 #define	DOW_STAR	2
 #define	WHEN_REBOOT	4
 #define RUN_DOWNTIME	8
-#define RUN_DOWN_ONCE   16
-#define RUN_ONLY_IDLE	32
-#define RUN_IDLE_ONCE	64
+#define RUN_DOWN_ONCE	16
+#define RUN_NOW		32
 } entry;
 
 			/* the crontab database will be a list of the
--- hc-cron-0.13/database.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/database.c	Mon Oct 11 15:31:13 1999
@@ -29,9 +29,6 @@
 #include <sys/file.h>
 
 
-#define TMAX(a,b) ((a)>(b)?(a):(b))
-
-
 static	void		process_crontab __P((char *, char *, char *,
 					     struct stat *,
 					     cron_db *, cron_db *));
@@ -48,6 +45,8 @@
 	DIR		*dir;
 	struct stat	statbuf;
 	struct stat	syscron_stat;
+	struct stat	syscrondir_stat;
+	TIME_T		newtime;
 	DIR_T   	*dp;
 	cron_db		new_db;
 	user		*u, *nu;
@@ -62,11 +61,43 @@
 		log_it("CRON", getpid(), "STAT FAILED", SPOOL_DIR);
 		(void) exit(ERROR_EXIT);
 	}
+	newtime = statbuf.st_mtime;
 
 	/* track system crontab file
 	 */
 	if (stat(SYSCRONTAB, &syscron_stat) < OK)
 		syscron_stat.st_mtime = 0;
+	else
+		if (syscron_stat.st_mtime > newtime)
+			newtime = syscron_stat.st_mtime;
+
+	/* track additional system crontabs directory
+	 */
+	if (stat(SYSCRONDIR, &syscrondir_stat) < OK)
+		syscrondir_stat.st_mtime = 0;
+	else
+		if (!(dir = opendir(SYSCRONDIR))) {
+			log_it("CRON", getpid(), "OPENDIR FAILED", SYSCRONDIR);
+			syscrondir_stat.st_mtime = 0;
+		} else {
+			if (syscrondir_stat.st_mtime > newtime)
+				newtime = syscrondir_stat.st_mtime;
+
+			while (NULL != (dp = readdir(dir))) {
+				char	tabname[MAXNAMLEN+1];
+
+				/* avoid file names beginning with ".", including "." and "..".
+				 */
+				if (dp->d_name[0] == '.')
+					continue;
+
+				snprintf(tabname, MAXNAMLEN+1, "%s/%s", SYSCRONDIR, dp->d_name);
+
+				if (stat(tabname, &statbuf) >= OK && statbuf.st_mtime > newtime)
+					newtime = statbuf.st_mtime;
+			}
+			closedir(dir);
+		}
 
 	/* if spooldir's mtime has not changed, we don't need to fiddle with
 	 * the database.
@@ -75,7 +106,7 @@
 	 * so is guaranteed to be different than the stat() mtime the first
 	 * time this function is called.
 	 */
-	if (old_db->mtime == TMAX(statbuf.st_mtime, syscron_stat.st_mtime)) {
+	if (old_db->mtime == newtime) {
 		Debug(DLOAD, ("[%d] spool dir mtime unch, no load needed.\n",
 			      getpid()))
 		return;
@@ -86,7 +117,12 @@
 	 * actually changed.  Whatever is left in the old database when
 	 * we're done is chaff -- crontabs that disappeared.
 	 */
-	new_db.mtime = TMAX(statbuf.st_mtime, syscron_stat.st_mtime);
+
+	/* we must execute all pending catch-up jobs NOW, because their data
+	   is shared with the database and may be freed */
+	while(CatchUpList) CatchUpList = run_cu_list(CatchUpList);
+
+	new_db.mtime = newtime;
 	new_db.head = new_db.tail = NULL;
 
 	if (syscron_stat.st_mtime) {
@@ -95,6 +131,28 @@
 				&new_db, old_db);
 	}
 
+	if (syscrondir_stat.st_mtime) {
+		if ((dir = opendir(SYSCRONDIR))) {
+
+			while (NULL != (dp = readdir(dir))) {
+				char	fname[MAXNAMLEN+1],
+					tabname[MAXNAMLEN+1];
+
+				/* avoid file names beginning with ".", including "." and "..".
+				 */
+				if (dp->d_name[0] == '.')
+					continue;
+
+				snprintf(fname, MAXNAMLEN+1, "*system*/%s", dp->d_name);
+				snprintf(tabname, MAXNAMLEN+1, "%s/%s", SYSCRONDIR, dp->d_name);
+
+				process_crontab("root", fname, tabname,
+						&statbuf, &new_db, old_db);
+			}
+			closedir(dir);
+		}
+	}
+
 	/* we used to keep this dir open all the time, for the sake of
 	 * efficiency.  however, we need to close it in every fork, and
 	 * we fork a lot more often than the mtime of the dir changes.
@@ -229,7 +287,7 @@
 	int		crontab_fd = OK - 1;
 	user		*u;
 
-	if (strcmp(fname, "*system*") && !(pw = getpwnam(uname))) {
+	if (strncmp(fname, "*system*", 8) && !(pw = getpwnam(uname))) {
 		/* file doesn't have a user in passwd file.
 		 */
 		log_it(fname, getpid(), "ORPHAN", "no passwd entry");
--- hc-cron-0.13/do_command.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/do_command.c	Mon Oct 11 15:31:13 1999
@@ -28,6 +28,8 @@
 #if defined(SYSLOG)
 # include <syslog.h>
 #endif
+#include <unistd.h>
+#include <stdlib.h>
 
 
 static void		child_process __P((entry *, user *)),
@@ -90,7 +92,8 @@
 {
 	int		stdin_pipe[2], stdout_pipe[2];
 	register char	*input_data;
-	char		*usernm, *mailto;
+	char		*usernm, *mailto, *nicestr;
+	int		nicelevel = 0;
 	int		children = 0;
 
 	Debug(DPROC, ("[%d] child_process('%s')\n", getpid(), e->cmd))
@@ -109,6 +112,12 @@
 	 */
 	usernm = env_get("LOGNAME", e->envp);
 	mailto = env_get("MAILTO", e->envp);
+	nicestr = env_get("NICE", e->envp);
+	if (nicestr)
+		nicelevel = atoi(nicestr);
+	/* don't allow increasing priority */
+	if (nicelevel < 0)
+		nicelevel = 0;
 
 #ifdef USE_SIGCHLD
 	/* our parent is watching for our death by catching SIGCHLD.  we
@@ -227,6 +236,10 @@
 # endif
 		setuid(e->uid);		/* we aren't root after this... */
 		chdir(env_get("HOME", e->envp));
+
+		/* set the nive level */
+		if (nicelevel)
+			nice (nicelevel);
 
 		/* exec the command.
 		 */
--- hc-cron-0.13/entry.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/entry.c	Mon Oct 11 15:31:13 1999
@@ -120,42 +120,42 @@
 	if (ch == '@') {
 		ch = get_string(cmd, MAX_COMMAND, file, " \t\n");
 		if (!strcmp("reboot", cmd)) {
-			e->flags |= ( WHEN_REBOOT | RUN_ONLY_IDLE );
+			e->flags |= WHEN_REBOOT;
 		} else if (!strcmp("yearly", cmd) || !strcmp("annually", cmd)){
 			bit_set(e->minute, 0);
 			bit_set(e->hour, 0);
 			bit_set(e->dom, 0);
 			bit_set(e->month, 0);
 			bit_nset(e->dow, 0, DOW_COUNT);
-			e->flags |= RUN_ONLY_IDLE | DOW_STAR;
+			e->flags |= DOW_STAR;
 		} else if (!strcmp("monthly", cmd)) {
 			bit_set(e->minute, 0);
 			bit_set(e->hour, 0);
 			bit_set(e->dom, 0);
 			bit_nset(e->month, 0, MONTH_COUNT);
 			bit_nset(e->dow, 0, DOW_COUNT);
-			e->flags |= RUN_ONLY_IDLE | DOW_STAR;
+			e->flags |= DOW_STAR;
 		} else if (!strcmp("weekly", cmd)) {
 			bit_set(e->minute, 0);
 			bit_set(e->hour, 0);
 			bit_nset(e->dom, 0, DOM_COUNT);
 			bit_nset(e->month, 0, MONTH_COUNT);
 			bit_set(e->dow, 0);
-			e->flags |= RUN_ONLY_IDLE | DOM_STAR;
+			e->flags |= DOM_STAR;
 		} else if (!strcmp("daily", cmd) || !strcmp("midnight", cmd)) {
 			bit_set(e->minute, 0);
 			bit_set(e->hour, 0);
 			bit_nset(e->dom, 0, DOM_COUNT);
 			bit_nset(e->month, 0, MONTH_COUNT);
 			bit_nset(e->dow, 0, DOW_COUNT);
-			e->flags |= RUN_ONLY_IDLE | DOM_STAR | DOW_STAR;
+			e->flags |= DOM_STAR | DOW_STAR;
 		} else if (!strcmp("hourly", cmd)) {
 			bit_set(e->minute, 0);
 			bit_nset(e->hour, 0, HOUR_COUNT);
 			bit_nset(e->dom, 0, DOM_COUNT);
 			bit_nset(e->month, 0, MONTH_COUNT);
 			bit_nset(e->dow, 0, DOW_COUNT);
-			e->flags |= RUN_ONLY_IDLE | DOM_STAR | DOW_STAR;
+			e->flags |= DOM_STAR | DOW_STAR;
 		} else {
 			ecode = e_timespec;
 			goto eof;
--- hc-cron-0.13/hccron.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/hccron.c	Mon Oct 11 15:31:13 1999
@@ -44,7 +44,7 @@
    register TIME_T	*current = &curstore;
    register struct tm	*curtm;   
    register user	*u;
-   register entry	*e;
+   register entry	*e, *new_e;
    char			msg[MAX_MSGLEN];
    list_cu		*cul_tail = NULL;
    unsigned int		counter=0;
@@ -89,7 +89,7 @@
 		   * loop, I adjust only FIRST_DOM further down
 		   */
 
-	          if( bit_test(e->minute, curtm->tm_min)
+		  if( bit_test(e->minute, curtm->tm_min)
 		      && bit_test(e->hour, curtm->tm_hour)
 		      && bit_test(e->month, curtm->tm_mon)
 		      && ( ((e->flags & DOM_STAR) || (e->flags & DOW_STAR))
@@ -101,12 +101,15 @@
 		     Debug(DSCH, ("found catch-up job: %s\n", e->cmd))
 		     counter++;
 		     if(e->flags & RUN_DOWN_ONCE) e->flags &= ~RUN_DOWNTIME;
+		     new_e = (entry *) malloc(sizeof(entry));
+		     memcpy(new_e, e, sizeof(entry));
+		     new_e->flags |= RUN_NOW;
 		     if(*cul_head != NULL) {
 			if((cul_tail->next = malloc(sizeof(list_cu)))) {
 			   cul_tail = cul_tail->next;
 			   cul_tail->next = NULL;
 			   cul_tail->cul_u = u;
-			   cul_tail->cul_e = e;
+			   cul_tail->cul_e = new_e;
 			   cul_tail->rtime = *current;
 			}
 		     } else {
@@ -114,9 +117,10 @@
 			   cul_tail = *cul_head;
 			   cul_tail->next = NULL;
 			   cul_tail->cul_u = u;
-			   cul_tail->cul_e = e;
+			   cul_tail->cul_e = new_e;
 			   cul_tail->rtime = *current;
-			}
+			} else
+			   free(new_e);
 		     }
 		  } /* if (bit_test) */
 	       } /* if (e->flags & RUN_DOWNTIME) */
@@ -146,10 +150,6 @@
    cur = cul->rtime;
    do
      {
-	if(!(cul->cul_e->flags & RUN_ONLY_IDLE))
-	  {
-	     cul->cul_e->flags |= RUN_ONLY_IDLE | RUN_IDLE_ONCE;
-	  };
 	job_add(cul->cul_e, cul->cul_u);
 	tmp = cul->next;
         free(cul);
--- hc-cron-0.13/job.c.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/job.c	Mon Oct 11 15:31:13 1999
@@ -78,57 +78,31 @@
 #endif /* ANSI_C */
 {
    register job	*j, *jn;
-   register int NotIdle=FALSE;
    register int	run = 0;
 
-#ifdef LOADAVG_FILE
-   int		file;
-   char		load[5];
-
-   if((file=open(LOADAVG_FILE, O_RDONLY)))
-     {
-	read(file, load, 4);
-	load[4]=0;
-	Debug(DMISC,("load average: %s",load))
-	NotIdle=(strtod(load, NULL) > MAXLOADAVG);
-	close(file);
-     } 
-   else
-     {
-	log_it("CRON", getpid(), "could not open", LOADAVG_FILE);
-	NotIdle=FALSE;
-     };
-#endif
-   
    for (j=jhead; j; j=jn)
      {
 	jn = j->next;
-	if(! (NotIdle && (j->e->flags & RUN_ONLY_IDLE)) )
+	do_command(j->e, j->u);
+	if(jn)
+	  { 
+	     jn->prev = j->prev;
+	  }
+	else
+	  {
+	     jtail=j->prev;
+	  }
+	if(j->prev)
+	  {
+	     j->prev->next = jn;
+	  }
+	else
 	  {
-	     do_command(j->e, j->u);
-	     /* if we want to run idle only once (probably a catch up job)
-	      * delete RUN_ONLY_IDLE flag
-	      */
-	     if(RUN_IDLE_ONCE & j->e->flags){j->e->flags &= ~RUN_ONLY_IDLE;};
-	     if(jn)
-	       { 
-		  jn->prev = j->prev;
-	       }
-	     else
-	       {
-		  jtail=j->prev;
-	       }
-	     if(j->prev)
-	       {
-		  j->prev->next = jn;
-	       }
-	     else
-	       {
-		  jhead=jn;
-	       }
-	     free(j);
-	     run++;
-	  };
+	     jhead=jn;
+	  }
+	if (j->e->flags & RUN_NOW) free(j->e);
+	free(j);
+	run++;
      }
    return run;
 }
--- hc-cron-0.13/pathnames.h.wiget	Sun Sep 26 01:39:41 1999
+++ hc-cron-0.13/pathnames.h	Mon Oct 11 15:31:13 1999
@@ -73,6 +73,9 @@
 			/* 4.3BSD-style crontab */
 #define SYSCRONTAB	"/etc/crontab"
 
+			/* directory of additional system crontabs */
+#define SYSCRONDIR	"/etc/cron.d"
+
 			/* what editor to use if no EDITOR or VISUAL
 			 * environment variable specified.
 			 */
